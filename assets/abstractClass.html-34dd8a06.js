import{_ as n,o as s,c as a,a as t}from"./app-1c9dd427.js";const e={},p=t(`<h1 id="ðŸ“”-php-oop-abstract-classes" tabindex="-1"><a class="header-anchor" href="#ðŸ“”-php-oop-abstract-classes" aria-hidden="true">#</a> ðŸ“” PHP OOP - Abstract Classes</h1><h2 id="php-oop-abstract-classes-oop-abstrakt-sinflar" tabindex="-1"><a class="header-anchor" href="#php-oop-abstract-classes-oop-abstrakt-sinflar" aria-hidden="true">#</a> PHP OOP - Abstract Classes (OOP - Abstrakt sinflar)</h2><p>PHP - Abstrakt sinflar va usullar nima?</p><p>Mavhum sinflar va usullar ota-sinfda nomlangan usul bo&#39;lsa, lekin vazifalarni to&#39;ldirish uchun uning pastki sinf(lar)i kerak bo&#39;lganda.</p><p>Abstrakt sinf - bu kamida bitta mavhum usulni o&#39;z ichiga olgan sinf. Mavhum usul - e&#39;lon qilingan, lekin kodda amalga oshirilmagan usul.</p><p>Mavhum sinf yoki usul quyidagi kalit so&#39;z bilan aniqlanadi abstract :</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">ParentClass</span> <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">someMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">someMethod2</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">someMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mavhum sinfdan meros bo&#39;lganda, bolalar sinf usuli bir xil nom va bir xil yoki kamroq cheklangan kirish modifikatori bilan aniqlanishi kerak. Shunday qilib, agar mavhum usul himoyalangan deb ta&#39;riflangan bo&#39;lsa, bolalar klassi usuli himoyalangan yoki umumiy sifatida belgilanishi kerak, lekin shaxsiy emas. Bundan tashqari, talab qilinadigan argumentlarning turi va soni bir xil bo&#39;lishi kerak. Biroq, bolalar sinflarida qo&#39;shimcha ravishda ixtiyoriy dalillar bo&#39;lishi mumkin.</p><p>Shunday qilib, agar bolalar sinfi mavhum sinfdan meros bo&#39;lib o&#39;tgan bo&#39;lsa, bizda quyidagi qoidalar mavjud:</p><ul><li>Child sinf usuli bir xil nom bilan aniqlanishi kerak va u ota-mavhum usulni qayta e&#39;lon qiladi</li><li>Bolalar sinfi usuli bir xil yoki kamroq cheklangan kirish modifikatori bilan aniqlanishi kerak</li><li>Kerakli argumentlar soni bir xil bo&#39;lishi kerak. Biroq, bolalar sinfida qo&#39;shimcha ravishda ixtiyoriy dalillar bo&#39;lishi mumkin</li></ul><p>Keling, bir misolni ko&#39;rib chiqaylik:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// Parent class</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Car</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Child classes</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Audi</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;Choose German quality! I&#39;m an <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span></span>!&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Volvo</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;Proud to be Swedish! I&#39;m a <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span></span>!&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Citroen</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;French extravagance! I&#39;m a <span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span></span>!&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Create objects from the child classes</span>
<span class="token variable">$audi</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">audi</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Audi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$audi</span><span class="token operator">-&gt;</span><span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>

<span class="token variable">$volvo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">volvo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Volvo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$volvo</span><span class="token operator">-&gt;</span><span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>

<span class="token variable">$citroen</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">citroen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Citroen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$citroen</span><span class="token operator">-&gt;</span><span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Misol tushuntirildi</p><p>Audi, Volvo va Citroen sinflari Car sinfidan meros bo&#39;lib qolgan. Bu Audi, Volvo va Citroen sinflari meros tufayli umumiy $name xususiyatidan hamda Car sinfidagi public __construct() usulidan foydalanishi mumkinligini anglatadi.</p><p>Biroq, intro() barcha bolalar sinflarida aniqlanishi kerak bo&#39;lgan mavhum usul bo&#39;lib, ular satrni qaytarishi kerak.</p><p>PHP - Ko&#39;proq mavhum sinf misollari Keling, mavhum usulda argumentga ega bo&#39;lgan boshqa misolni ko&#39;rib chiqaylik:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">ParentClass</span> <span class="token punctuation">{</span>
  <span class="token comment">// Abstract method with an argument</span>
  <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">prefixName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ChildClass</span> <span class="token keyword">extends</span> <span class="token class-name">ParentClass</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">prefixName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">==</span> <span class="token string double-quoted-string">&quot;John Doe&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token variable">$prefix</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Mr.&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">==</span> <span class="token string double-quoted-string">&quot;Jane Doe&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token variable">$prefix</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Mrs.&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token variable">$prefix</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$prefix</span><span class="token punctuation">}</span></span> <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildClass</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$class</span><span class="token operator">-&gt;</span><span class="token function">prefixName</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$class</span><span class="token operator">-&gt;</span><span class="token function">prefixName</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Jane Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Keling, mavhum usulda argumentga ega bo&#39;lgan boshqa misolni ko&#39;rib chiqaylik va bolalar sinfida ota-onaning abstrakt usulida aniqlanmagan ikkita ixtiyoriy argument mavjud:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">ParentClass</span> <span class="token punctuation">{</span>
  <span class="token comment">// Abstract method with an argument</span>
  <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">prefixName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ChildClass</span> <span class="token keyword">extends</span> <span class="token class-name">ParentClass</span> <span class="token punctuation">{</span>
  <span class="token comment">// The child class may define optional arguments that are not in the parent&#39;s abstract method</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">prefixName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$separator</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token variable">$greet</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Dear&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">==</span> <span class="token string double-quoted-string">&quot;John Doe&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token variable">$prefix</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Mr&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">==</span> <span class="token string double-quoted-string">&quot;Jane Doe&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token variable">$prefix</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Mrs&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token variable">$prefix</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$greet</span><span class="token punctuation">}</span></span> <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$prefix</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$separator</span><span class="token punctuation">}</span></span> <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildClass</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$class</span><span class="token operator">-&gt;</span><span class="token function">prefixName</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$class</span><span class="token operator">-&gt;</span><span class="token function">prefixName</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Jane Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),o=[p];function i(l,c){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","abstractClass.html.vue"]]);export{r as default};
