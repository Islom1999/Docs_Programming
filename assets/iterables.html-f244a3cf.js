import{_ as n,o as a,c as s,a as t}from"./app-1c9dd427.js";const e={},i=t(`<h1 id="ðŸ“”-php-iterables" tabindex="-1"><a class="header-anchor" href="#ðŸ“”-php-iterables" aria-hidden="true">#</a> ðŸ“” PHP Iterables</h1><h2 id="php-iterables" tabindex="-1"><a class="header-anchor" href="#php-iterables" aria-hidden="true">#</a> PHP Iterables</h2><p>PHP - Iterable nima?</p><p>Iterable - bu foreach()tsikl orqali o&#39;tish mumkin bo&#39;lgan har qanday qiymat.</p><p>Pseudo iterable-turi PHP 7.1 da joriy qilingan va u funktsiya argumentlari va funktsiyani qaytarish qiymatlari uchun ma&#39;lumotlar turi sifatida ishlatilishi mumkin.</p><p>PHP - Iterablelardan foydalanish Kalit iterableso&#39;z funktsiya argumentining ma&#39;lumotlar turi yoki funktsiyaning qaytish turi sifatida ishlatilishi mumkin:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">printIterable</span><span class="token punctuation">(</span><span class="token keyword type-hint">iterable</span> <span class="token variable">$myIterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$myIterable</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$item</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">printIterable</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">getIterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword return-type">iterable</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$myIterable</span> <span class="token operator">=</span> <span class="token function">getIterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$myIterable</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token variable">$item</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PHP - Iterables yaratish</p><p>Massivlar</p><p>Barcha massivlar takrorlanuvchidir, shuning uchun har qanday massiv iteratsiyani talab qiladigan funksiyaning argumenti sifatida ishlatilishi mumkin.</p><p>Iteratorlar</p><p>Interfeysni amalga oshiradigan har qanday ob&#39;ekt Iteratoriteratsiyani talab qiladigan funktsiyaning argumenti sifatida ishlatilishi mumkin.</p><p>Iterator elementlar ro&#39;yxatini o&#39;z ichiga oladi va ular orqali aylanish usullarini taqdim etadi. U ro&#39;yxatdagi elementlardan biriga ko&#39;rsatgichni saqlaydi. Ro&#39;yxatdagi har bir elementda elementni topish uchun ishlatilishi mumkin bo&#39;lgan kalit bo&#39;lishi kerak.</p><p>Iterator quyidagi usullarga ega bo&#39;lishi kerak:</p><ul><li>current()- Ko&#39;rsatkich hozirda ko&#39;rsatayotgan elementni qaytaradi. Bu har qanday ma&#39;lumot turi bo&#39;lishi mumkin</li><li>key()RoÊ»yxatdagi joriy element bilan bogÊ»langan kalitni qaytaradi. Bu faqat butun son, float, mantiqiy yoki satr bo&#39;lishi mumkin</li><li>next()Ko&#39;rsatkichni ro&#39;yxatdagi keyingi elementga o&#39;tkazadi</li><li>rewind()Ko&#39;rsatkichni ro&#39;yxatdagi birinchi elementga olib boradi</li><li>valid()Agar ichki ko&#39;rsatkich biron bir elementga ishora qilmasa (masalan, ro&#39;yxat oxirida next() chaqirilgan bo&#39;lsa), bu noto&#39;g&#39;ri qiymatini qaytarishi kerak. Boshqa har qanday holatda u haqiqatni qaytaradi</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// Create an Iterator</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token variable">$pointer</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// array_values() makes sure that the keys are numbers</span>
    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">items</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">items</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pointer</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pointer</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pointer</span><span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pointer</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// count() indicates how many items are in the list</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pointer</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// A function that uses iterables</span>
<span class="token keyword">function</span> <span class="token function-definition function">printIterable</span><span class="token punctuation">(</span><span class="token keyword type-hint">iterable</span> <span class="token variable">$myIterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$myIterable</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$item</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Use the iterator as an iterable</span>
<span class="token variable">$iterator</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyIterator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printIterable</span><span class="token punctuation">(</span><span class="token variable">$iterator</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),p=[i];function o(l,c){return a(),s("div",null,p)}const r=n(e,[["render",o],["__file","iterables.html.vue"]]);export{r as default};
