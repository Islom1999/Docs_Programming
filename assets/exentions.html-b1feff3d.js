import{_ as n,o as s,c as a,a as p}from"./app-b44ed27c.js";const e="/image_js/php19.png",t="/image_js/php20.png",i={},o=p(`<h1 id="ðŸ“”-php-exceptions" tabindex="-1"><a class="header-anchor" href="#ðŸ“”-php-exceptions" aria-hidden="true">#</a> ðŸ“” PHP Exceptions</h1><h2 id="php-exceptions-php-istisnolari" tabindex="-1"><a class="header-anchor" href="#php-exceptions-php-istisnolari" aria-hidden="true">#</a> PHP Exceptions (PHP istisnolari)</h2><p>Istisno nima?</p><p>Istisno - bu PHP skriptining xatosi yoki kutilmagan xatti-harakatlarini tavsiflovchi ob&#39;ekt.</p><p>Istisnolar ko&#39;plab PHP funktsiyalari va sinflari tomonidan chiqariladi.</p><p>Foydalanuvchi tomonidan belgilangan funksiyalar va sinflar ham istisnolarni keltirib chiqarishi mumkin.</p><p>Istisnolar funksiyadan foydalana olmaydigan ma&#39;lumotlarga duch kelganda uni to&#39;xtatishning yaxshi usuli hisoblanadi.</p><p>Istisnoni tashlash</p><p>Bayonot throwfoydalanuvchi tomonidan belgilangan funktsiya yoki usulga istisno qilish imkonini beradi. Istisno chiqarilganda, undan keyingi kod bajarilmaydi.</p><p>Agar istisno qo&#39;lga olinmasa, &quot;Uchqalanmagan istisno&quot; xabari bilan halokatli xatolik yuz beradi.</p><p>Keling, uni ushlab turmasdan istisno qilishga harakat qilaylik:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span><span class="token variable">$dividend</span><span class="token punctuation">,</span> <span class="token variable">$divisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$divisor</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Division by zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token variable">$dividend</span> <span class="token operator">/</span> <span class="token variable">$divisor</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>Fatal error<span class="token punctuation">:</span> Uncaught Exception<span class="token punctuation">:</span> Division by zero in <span class="token constant">C</span><span class="token punctuation">:</span>\\webfolder\\test<span class="token operator">.</span>php<span class="token punctuation">:</span><span class="token number">4</span>
Stack trace<span class="token punctuation">:</span> <span class="token comment">#0 C:\\webfolder\\test.php(9):</span>
<span class="token class-name return-type">divide</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#1 {main} thrown in C:\\webfolder\\test.php on line 4</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>try...catch bayonoti</p><p>Yuqoridagi misoldagi xatolikka yo&#39;l qo&#39;ymaslik uchun biz try...catchistisnolarni ushlash va jarayonni davom ettirish uchun bayonotdan foydalanishimiz mumkin.</p><p>Sintaksis</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  code that can <span class="token keyword">throw</span> exceptions
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  code that runs when an exception is caught
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span><span class="token variable">$dividend</span><span class="token punctuation">,</span> <span class="token variable">$divisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$divisor</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Division by zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token variable">$dividend</span> <span class="token operator">/</span> <span class="token variable">$divisor</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Unable to divide.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Catch bloki qanday istisno turini ushlab turish kerakligini va istisnoga kirish uchun ishlatilishi mumkin bo&#39;lgan o&#39;zgaruvchining nomini ko&#39;rsatadi. Yuqoridagi misolda istisno turi, Exceptiono&#39;zgaruvchining nomi esa $e.</p><p>The try...catch...nihoyat Bayonot</p><p>Bayonot try...catch...finallyistisnolarni qo&#39;lga olish uchun ishlatilishi mumkin. Blokdagi kod finallyhar doim istisno ushlangan-qilmaganligidan qat&#39;iy nazar ishlaydi. Agar finallymavjud bo&#39;lsa, catchblok ixtiyoriy.</p><p>Sintaksis</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  code that can <span class="token keyword">throw</span> exceptions
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  code that runs when an exception is caught
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  code that always runs regardless of whether an exception was caught
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span><span class="token variable">$dividend</span><span class="token punctuation">,</span> <span class="token variable">$divisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$divisor</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Division by zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token variable">$dividend</span> <span class="token operator">/</span> <span class="token variable">$divisor</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Unable to divide. &quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Process complete.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Misol Istisno ushlanmagan bo&#39;lsa ham, qatorni chiqaring:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span><span class="token variable">$dividend</span><span class="token punctuation">,</span> <span class="token variable">$divisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$divisor</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Division by zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token variable">$dividend</span> <span class="token operator">/</span> <span class="token variable">$divisor</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Process complete.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Istisno obyekti Istisno ob&#39;ekti funksiya duch kelgan xato yoki kutilmagan xatti-harakatlar haqida ma&#39;lumotni o&#39;z ichiga oladi.</p><p>Sintaksis</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">new</span> <span class="token function">Exception</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> code<span class="token punctuation">,</span> previous<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Parametr qiymatlari <img src="`+e+'"></p><p>Usullari Istisnoni qo&#39;lga kiritishda quyidagi jadvalda istisno haqida ma&#39;lumot olish uchun ishlatilishi mumkin bo&#39;lgan ba&#39;zi usullar ko&#39;rsatilgan: <img src="'+t+`"></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span><span class="token variable">$dividend</span><span class="token punctuation">,</span> <span class="token variable">$divisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$divisor</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Division by zero&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token variable">$dividend</span> <span class="token operator">/</span> <span class="token variable">$divisor</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$ex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$ex</span><span class="token operator">-&gt;</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token variable">$ex</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$ex</span><span class="token operator">-&gt;</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$line</span> <span class="token operator">=</span> <span class="token variable">$ex</span><span class="token operator">-&gt;</span><span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Exception thrown in <span class="token interpolation"><span class="token variable">$file</span></span> on line <span class="token interpolation"><span class="token variable">$line</span></span>: [Code <span class="token interpolation"><span class="token variable">$code</span></span>]
  <span class="token interpolation"><span class="token variable">$message</span></span>&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),l=[o];function c(u,d){return s(),a("div",null,l)}const k=n(i,[["render",c],["__file","exentions.html.vue"]]);export{k as default};
